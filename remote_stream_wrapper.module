<?php

use Drupal\Core\StreamWrapper\StreamWrapperInterface;
use Drupal\image\Entity\ImageStyle;
use Drupal\file\Entity\File;

function file_is_scheme_remote($scheme) {
  if ($wrapper = \Drupal::service('stream_wrapper_manager')->getViaScheme($scheme)) {
    return file_is_wrapper_remote($wrapper);
  }
  else {
    return FALSE;
  }
}

function file_is_uri_remote($uri) {
  if ($wrapper = \Drupal::service('stream_wrapper_manager')->getViaUri($uri)) {
    return file_is_wrapper_remote($wrapper);
  }
  else {
    return FALSE;
  }
}

function file_is_wrapper_remote($wrapper) {
  return is_subclass_of($wrapper, '\Drupal\remote_stream_wrapper\StreamWrapper\RemoteStreamWrapperInterface');
}

/**
 * Implements hook_file_url_alter().
 */
function remote_stream_wrapper_file_url_alter(&$uri) {
  if (strpos($uri, "://styles/") && file_is_uri_remote($uri)) {
    // Remote image style derivatives are stored in the public file system.
    $uri = str_replace(file_uri_scheme($uri) . '://', 'public://', $uri);
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for file entities.
 */
function remote_stream_wrapper_file_predelete(File $file) {
  // Delete any image derivatives of this image.
  if (file_is_uri_remote($file->getFileUri())) {
    remote_stream_wrapper_image_path_flush($file->getFileUri());
  }
}

/**
 * Clears cached versions of a specific file in all styles.
 *
 * @param $path
 *   The Drupal file path to the original image.
 */
function remote_stream_wrapper_image_path_flush($path) {
  /** @var \Drupal\image\ImageStyleInterface[] $styles */
  $styles = ImageStyle::loadMultiple();
  foreach ($styles as $style) {
    $derivative_uri = $style->buildUri($path);
    // Remote image style derivatives are stored in the public file system.
    $derivative_uri = str_replace(file_uri_scheme($derivative_uri) . '://', 'public://', $derivative_uri);
    if (file_exists($derivative_uri)) {
      file_unmanaged_delete($derivative_uri);
    }
  }
}
